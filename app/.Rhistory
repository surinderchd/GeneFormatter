library(stringr)
# reading Olink NPX data
my_NPX_data <- read_NPX(filename = "Downloads/")
# reading Olink NPX data
my_NPX_data <- read_NPX(filename = "Downloads/2024-08-16 Mouse expl. AG Isermann_NPX_Biemann_long.xlsx")
library(readxl)
# reading Olink NPX data
my_NPX_data <- read_xlsx(filename = "Downloads/2024-08-16 Mouse expl. AG Isermann_NPX_Biemann_long.xlsx")
library(OlinkAnalyze)
library(readxl)
# Load other libraries used in Vignette
library(dplyr)
library(ggplot2)
library(stringr)
# open package
library(OlinkAnalyze)
# reading Olink NPX data
my_NPX_data <- read_xlsx(filename = "~/Downloads/2024-08-16 Mouse expl. AG Isermann_NPX_Biemann_long.xlsx")
# reading Olink NPX data
my_NPX_data <- read_NPX(filename = "~/Downloads/2024-08-16 Mouse expl. AG Isermann_NPX_Biemann_long.xlsx")
# reading Olink NPX data
my_NPX_data <- read_NPX(filename = "~/Downloads/2024-08-16 Mouse expl. AG Isermann_NPX_Biemann_long.xlsx", list= TRUE)
# reading Olink NPX data
my_NPX_data <- read_NPX(filename = "~/Downloads/2024-08-16 Mouse expl. AG Isermann_NPX_Biemann_long.xlsx", list= FALSE)
# reading Olink NPX data
my_NPX_data <- read_NPX(filename = "~/Downloads/2024-08-16 Mouse expl. AG Isermann_NPX_Biemann_long.xlsx")
# reading Olink NPX data
my_NPX_data <- read_NPX(filename = "~/Downloads/Ronald_data.xlsx")
# reading Olink NPX data
my_NPX_data <- read_xls(filename = "~/Downloads/Ronald_data.xlsx")
# reading Olink NPX data
my_NPX_data <- read_xlsx(filename = "~/Downloads/Ronald_data.xlsx")
# reading Olink NPX data
my_NPX_data <- read_xlsx(filename = "/Downloads/Ronald_data.xlsx")
file <- system.file("extdata", "Example_NPX_Data.csv", package = "OlinkAnalyze")
read_NPX(file)
olink_ttest(df = npx_data1,
variable = 'Treatment')
olink_wilcox(df = npx_data1,
variable = 'Treatment')
npx_data1_no_controls <- npx_data1 |>
filter(!str_detect(SampleID,
regex("control|ctrl",
ignore_case = TRUE))) |>
filter(!str_detect(Assay,
regex("control|ctrl",
ignore_case = TRUE)))
plot <- npx_data1_no_controls %>%
na.omit() %>% # removing missing values which exists for Site
olink_boxplot(variable = "Site",
olinkid_list = c("OID00488", "OID01276"),
number_of_proteins_per_plot  = 2)
plot[[1]]
anova_posthoc_results<-npx_data1_no_controls %>%
olink_anova_posthoc(olinkid_list = c("OID00488", "OID01276"),
variable = 'Site',
effect = 'Site')
plot2 <- npx_data1_no_controls %>%
na.omit() %>% # removing missing values which exists for Site
olink_boxplot(variable = "Site",
olinkid_list = c("OID00488", "OID01276"),
number_of_proteins_per_plot  = 2,
posthoc_results = anova_posthoc_results)
plot2[[1]]
file <- system.file("Downloads/ronald_data.xlsx", package = "OlinkAnalyze")
read_NPX(file)
file <- system.file("Downloads/ronald_data.xlsx")
data <- read_NPX(file)
data <- read_NPX("Downloads/ronald_data.xlsx")
library(OlinkAnalyze)
library(readxl)
# Load other libraries used in Vignette
library(dplyr)
library(ggplot2)
library(stringr)
library(OlinkAnalyze)
library(readxl)
# Load other libraries used in Vignette
library(dplyr)
library(ggplot2)
library(stringr)
file <- system.file("Downloads/ronald_data.xlsx")
# reading Olink NPX data
my_NPX_data <- read_NPX(file)
# reading Olink NPX data
my_NPX_data <- read_NPX("file")
# reading Olink NPX data
my_NPX_data <- read_excel("Downloads/ronald_data.xlsx")
file
# reading Olink NPX data
my_NPX_data <- read_xlsx("Downloads/ronald_data.xlsx")
# reading Olink NPX data
my_NPX_data <- read_xls("Downloads/ronald_data.xlsx")
# reading Olink NPX data
my_NPX_data <- read_NPX("Documents/ronald_data.xlsx")
# reading Olink NPX data
data <- read_NPX("Documents/ronald_data.xlsx")
olink_ttest(df = npx_data1,
variable = 'Treatment')
olink_ttest(df = data,
variable = 'Treatment')
View(data)
memory.size()
gc()
gc()
gc()
BiocManager::install("MOFA2")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("MOFA2")
library(MOFA2)
library(MOFAdata)
BiocManager::install("MOFAdata")
library(MOFAdata)
library(data.table)
library(ggplot2)
library(tidyverse)
install.packages("tidyverse")
utils::data("CLL_data")
lapply(CLL_data,dim)
CLL_data
CLL_metadata <- fread("ftp://ftp.ebi.ac.uk/pub/databases/mofa/cll_vignette/sample_metadata.txt")
View(CLL_metadata)
MOFAobject <- create_mofa(CLL_data)
MOFAobject
plot_data_overview(MOFAobject)
library(MOFA2)
library(MOFAdata)
library(data.table)
library(ggplot2)
library(tidyverse)
data <- make_example_data(
n_views = 2,
n_samples = 200,
n_features = 1000,
n_factors = 10
)[[1]]
lapply(data,dim)
View(data)
MOFAobject <- create_mofa(data)
N = ncol(data[[1]])
groups = c(rep("A",N/2), rep("B",N/2))
MOFAobject <- create_mofa(data, groups=groups)
dt = fread("ftp://ftp.ebi.ac.uk/pub/databases/mofa/getting_started/data.txt.gz")
head(dt)
library(MOFA2)
library(MOFAdata)
library(data.table)
library(ggplot2)
library(tidyverse)
data <- make_example_data(
n_views = 2,
n_samples = 200,
n_features = 1000,
n_factors = 10
)[[1]]
lapply(data,dim)
MOFAobject <- create_mofa(data)
N = ncol(data[[1]])
groups = c(rep("A",N/2), rep("B",N/2))
MOFAobject <- create_mofa(data, groups=groups)
plot_data_overview(MOFAobject)
data_opts <- get_default_data_options(MOFAobject)
data_opts
MOFAobject <- create_mofa(data)
data <- make_example_data(
n_views = 2,
n_samples = 200,
n_features = 1000,
n_factors = 10
)[[1]]
lapply(data,dim)
MOFAobject <- create_mofa(data)
plot_data_overview(MOFAobject)
library(MOFA2)
library(MOFAdata)
library(data.table)
library(ggplot2)
library(tidyverse)
utils::data("CLL_data")
lapply(CLL_data,dim)
CLL_metadata <- fread("ftp://ftp.ebi.ac.uk/pub/databases/mofa/cll_vignette/sample_metadata.txt")
MOFAobject <- create_mofa(CLL_data)
MOFAobject
plot_data_overview(MOFAobject)
data_opts <- get_default_data_options(MOFAobject)
data_opts
model_opts <- get_default_model_options(MOFAobject)
model_opts$num_factors <- 15
model_opts
train_opts <- get_default_training_options(MOFAobject)
train_opts$convergence_mode <- "slow"
train_opts$seed <- 42
train_opts
MOFAobject <- prepare_mofa(MOFAobject,
data_options = data_opts,
model_options = model_opts,
training_options = train_opts
)
saveRDS(MOFAobject,"MOFA2_CLL.rds")
MOFAobject <- readRDS(url("http://ftp.ebi.ac.uk/pub/databases/mofa/cll_vignette/MOFA2_CLL.rds"))
slotNames(MOFAobject)
names(MOFAobject@data)
dim(MOFAobject@data$Drugs$group1)
names(MOFAobject@expectations)
dim(MOFAobject@expectations$Z$group1)
dim(MOFAobject@expectations$W$mRNA)
samples_metadata(MOFAobject) <- CLL_metadata
plot_factor_cor(MOFAobject)
plot_variance_explained(MOFAobject, max_r2=15)
plot_variance_explained(MOFAobject, plot_total = T)[[2]]
correlate_factors_with_covariates(MOFAobject,
covariates = c("Gender","died","age"),
plot="log_pval"
)
correlate_factors_with_covariates(MOFAobject,
covariates = c("Gender","died","age"),
plot="log_pval"
)
MOFAobject
correlate_factors_with_covariates(MOFAobject,
covariates = c("died","age"),
plot="log_pval"
)
plot_factor(MOFAobject,
factors = 1,
color_by = "Factor1"
)
plot_weights(MOFAobject,
view = "Mutations",
factor = 1,
nfeatures = 10,     # Top number of features to highlight
scale = T           # Scale weights from -1 to 1
)
plot_top_weights(MOFAobject,
view = "Mutations",
factor = 1,
nfeatures = 10,     # Top number of features to highlight
scale = T           # Scale weights from -1 to 1
)
plot_factor(MOFAobject,
factors = 1,
color_by = "IGHV",
add_violin = TRUE,
dodge = TRUE
)
source("http://www.bioconductor.org/biocLite.R")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("edgeR")
library(edgeR)
library( baySeq )
BiocManager::install("baySeq")
library( baySeq )
library(ggplot2)
# Load data from computer.
mtrx_counts <- as.matrix( read.table( "/Users/surinderpal/Downloads/transcript_count_matrix.csv" ) )
# Load bayseq data
data( mobData )
data( mobAnnotation )
View(mobAnnotation)
group <- factor( c( 1, 1, 1, 1, 2, 2, 2, 2 ) )
group
design <- model.matrix( ~0+group )
design <- mtrx_counts( ~0+group )
# Load data from computer.
mtrx_counts <- as.matrix( read.table( "/Users/surinderpal/Downloads/transcript_count_matrix.csv" ) )
design <- mtrx_counts( ~0+group )
# Load data from computer.
mtrx_counts <- as.matrix( read.table( "/Users/surinderpal/Downloads/transcript_count_matrix.csv" ) )
group <- factor( c( 1, 1, 1, 1, 2, 2, 2, 2 ) )
design <- mtrx_counts( ~0+group )
group <- factor( c("WT","WT", "WT", "TmPro", "TmPro", "TmPro") )
design <- mtrx_counts( ~0+group )
design <- model.matrix( ~0+group )
design
# Starting count dimensions
dim( mtrx_counts )
# Filter. Atleast 100 cpm in atleast 2 samples or discard
mtrx_counts <- mtrx_counts[ rowSums(cpm(mobData)>100) >= 2, ]
# Filter. Atleast 100 cpm in atleast 2 samples or discard
mtrx_counts <- mtrx_counts[ rowSums(cpm(mtrx_counts)>100) >= 2, ]
mtrx_counts_numeric <- as.matrix(mtrx_counts[ , sapply(mtrx_counts, is.numeric)])
library(edgeR)
library(ggplot2)
# Load data from computer.
mtrx_counts <- as.matrix( read.table( "/Users/surinderpal/Downloads/gene_count_matrix.csv" ) )
View(mtrx_counts)
# Load data from computer.
mtrx_counts <- as.matrix( read.table( "/Users/surinderpal/Downloads/transcript_count_matrix.csv" ) )
group <- factor( c("WT","WT", "WT", "WT", "TmPro", "TmPro", "TmPro", "TmPro") )
# MM="triple mutant shoot grafted onto triple mutant root"
# WM="wild-type shoot grafted onto triple mutant root"
# WW="wild-type shoot grafted onto wild-type root"
design <- model.matrix( ~0+group )
design
# Starting count dimensions
dim( mtrx_counts )
# Filter. Atleast 100 cpm in atleast 2 samples or discard
data <- mtrx_counts[ rowSums(cpm(mtrx_counts)>100) >= 2, ]
View(mtrx_counts)
# Load data from computer.
mtrx_counts <- as.matrix( read.csv( "/Users/surinderpal/Downloads/transcript_count_matrix.csv" ) )
View(mtrx_counts)
# MM="triple mutant shoot grafted onto triple mutant root"
# WM="wild-type shoot grafted onto triple mutant root"
# WW="wild-type shoot grafted onto wild-type root"
design <- model.matrix( ~0+group )
design
# Filter. Atleast 100 cpm in atleast 2 samples or discard
data <- mtrx_counts[ rowSums(cpm(mtrx_counts)>100) >= 2, ]
# Filter. Atleast 100 cpm in atleast 2 samples or discard
data <- mtrx_counts[ rowSums(cpm(mtrx_counts)>100) >= 2, ]
summary(mtrx_counts)
any(mtrx_counts < 0)  # Will return TRUE if negative values exist
mtrx_counts[mtrx_counts < 0]
View(mtrx_counts)
# Load data from computer.
mtrx_counts <- read.csv( "/Users/surinderpal/Downloads/transcript_count_matrix.csv" ) )
# Load data from computer.
mtrx_counts <- read.csv( "/Users/surinderpal/Downloads/transcript_count_matrix.csv" )
View(mtrx_counts)
mtrx_counts <- as.matrix(mtrx_counts)
View(mtrx_counts)
group <- factor( c("WT","WT", "WT", "WT", "TmPro", "TmPro", "TmPro", "TmPro") )
# MM="triple mutant shoot grafted onto triple mutant root"
# WM="wild-type shoot grafted onto triple mutant root"
# WW="wild-type shoot grafted onto wild-type root"
design <- model.matrix( ~0+group )
design
# Starting count dimensions
dim( mtrx_counts )
d <- DGEList(counts=mtrx_counts,group=factor(group))
View(design)
View(mtrx_counts)
library(edgeR)
library(ggplot2)
# Read count matrix (rows: genes, columns: samples)
counts_matrix <- read.csv("Downloads/transcript_count_matrix.csv", row.names=1)  # Adjust filename
View(counts_matrix)
condition = c("WT_H", "WT_H", "WT_H", "WT_H", "Tmpro_H", "Tmpro_H", "Tmpro_H", "Tmpro_H")
sample_metadata <- data.frame(
sample = c("H461", "H462", "H463", "H464", "H467", "H470", "H472", "H473"),  # Sample names
condition = c("WT_H", "WT_H", "WT_H", "WT_H", "Tmpro_H", "Tmpro_H", "Tmpro_H", "Tmpro_H")
print(sample_metadata)
sample_metadata <- data.frame(
sample = c("H461", "H462", "H463", "H464", "H467", "H470", "H472", "H473"),  # Sample names
condition = c("WT_H", "WT_H", "WT_H", "WT_H", "Tmpro_H", "Tmpro_H", "Tmpro_H", "Tmpro_H")
# Print metadata to check
print(sample_metadata)
# Read metadata (must have 'sample' & 'condition' columns)
# Create sample metadata
sample_metadata <- data.frame(
sample = c("H461", "H462", "H463", "H464", "H467", "H470", "H472", "H473"),  # Sample names
condition = c("WT_H", "WT_H", "WT_H", "WT_H", "Tmpro_H", "Tmpro_H", "Tmpro_H", "Tmpro_H"))
# Print metadata to check
print(sample_metadata)
# Ensure the order of samples in metadata matches count matrix columns
rownames(sample_metadata) <- sample_metadata$sample
sample_metadata <- sample_metadata[colnames(counts_matrix), ]
# Define conditions (control vs. treatment)
group <- factor(sample_metadata$condition)
library(rtracklayer)
BiocManager::install("rtracklayer")
library(rtracklayer)
# Read GTF file (replace with your actual file)
gtf_file <- "Downloads/gffcmp.combined.gtf"
# Import GTF
gtf <- import(gtf_file)
# Convert to data frame
gtf_df <- as.data.frame(gtf)
# Check available column names
colnames(gtf_df)
# Create DGEList object
dge <- DGEList(counts=counts_matrix, group=group)
keep <- rowSums(cpm(dge) > 1) >= 2
dge <- dge[keep, , keep.lib.sizes=FALSE]
dge <- calcNormFactors(dge, method="TMM")
# Design matrix
design <- model.matrix(~0 + group)
colnames(design) <- levels(group)
dge <- estimateDisp(dge, design)
fit <- glmFit(dge, design)
contrast_matrix <- makeContrasts(TmProH_vs_WTH = Tmpro_H - WT_H, levels=design)
lrt <- glmLRT(fit, contrast=contrast_matrix)
# Get results with log fold-change and p-values
de_results <- topTags(lrt, n=Inf)$table
# Apply thresholds (FDR < 0.05 and |log2FC| > 1)
de_lncRNAs <- de_results[de_results$FDR < 0.05 & abs(de_results$logFC) > 1, ]
View(de_results)
# Save all results
write.csv(de_results, "lncRNA_DE_heart_results.csv", row.names=TRUE)
ggplot(de_results, aes(x=logFC, y=-log10(FDR))) +
geom_point(aes(color=(FDR < 0.05 & abs(logFC) > 1)), alpha=0.6) +
scale_color_manual(values=c("grey", "red")) +
labs(title="Volcano Plot of lncRNA DEGs", x="Log2 Fold Change", y="-Log10 FDR") +
theme_minimal()
# Volcano Plot
ggplot(de_results, aes(x=logFC, y=-log10(FDR))) +
geom_point(aes(color=(FDR < 0.05 & abs(logFC) > 0.5)), alpha=0.6) +
scale_color_manual(values=c("grey", "red")) +
labs(title="Volcano Plot of lncRNA DEGs", x="Log2 Fold Change", y="-Log10 FDR") +
theme_minimal()
# Volcano Plot
ggplot(de_results, aes(x=logFC, y=-log10(FDR))) +
geom_point(aes(color=(FDR < 0.05 & abs(logFC) > 1.5)), alpha=0.6) +
scale_color_manual(values=c("grey", "red")) +
labs(title="Volcano Plot of lncRNA DEGs", x="Log2 Fold Change", y="-Log10 FDR") +
theme_minimal()
ggplot(de_results, aes(x=logCPM, y=logFC)) +
geom_point(aes(color=(FDR < 0.05 & abs(logFC) > 1)), alpha=0.6) +
scale_color_manual(values=c("grey", "blue")) +
labs(title="MA Plot of lncRNA DEGs", x="Log CPM", y="Log2 Fold Change") +
theme_minimal()
getwd()
# Save all results
write.csv(de_results, "Downloads/lncRNA_DE_heart_results.csv", row.names=TRUE)
# Read count matrix (rows: genes, columns: samples)
counts_matrix <- read.csv("Downloads/gene_count_matrix.csv", row.names=1)  # Adjust filename
sample_metadata <- data.frame(
sample = c("H461", "H462", "H463", "H464", "H467", "H470", "H472", "H473"),  # Sample names
condition = c("WT_H", "WT_H", "WT_H", "WT_H", "Tmpro_H", "Tmpro_H", "Tmpro_H", "Tmpro_H"))
rownames(sample_metadata) <- sample_metadata$sample
sample_metadata <- sample_metadata[colnames(counts_matrix), ]
# Define conditions (control vs. treatment)
group <- factor(sample_metadata$condition)
# Create DGEList object
dge <- DGEList(counts=counts_matrix, group=group)
# Filter genes: At least 2 samples with CPM > 1
keep <- rowSums(cpm(dge) > 1) >= 2
dge <- dge[keep, , keep.lib.sizes=FALSE]
# ----------------------------- #
# Step 4: Normalize Data (TMM)
# ----------------------------- #
dge <- calcNormFactors(dge, method="TMM")
# ----------------------------- #
# Step 5: Define Experimental Design
# ----------------------------- #
# Design matrix
design <- model.matrix(~0 + group)
colnames(design) <- levels(group)
# ----------------------------- #
# Step 6: Estimate Dispersion
# ----------------------------- #
dge <- estimateDisp(dge, design)
fit <- glmFit(dge, design)
contrast_matrix <- makeContrasts(TmProH_vs_WTH = Tmpro_H - WT_H, levels=design)
lrt <- glmLRT(fit, contrast=contrast_matrix)
# ----------------------------- #
# Step 8: Extract DE lncRNAs
# ----------------------------- #
# Get results with log fold-change and p-values
de_results <- topTags(lrt, n=Inf)$table
# Apply thresholds (FDR < 0.05 and |log2FC| > 1)
de_lncRNAs <- de_results[de_results$FDR < 0.05 & abs(de_results$logFC) > 1, ]
View(de_lncRNAs)
# Save all results
write.csv(de_results, "Downloads/lncRNA_with_geneCount_DE_heart_results.csv", row.names=TRUE)
# Volcano Plot
ggplot(de_results, aes(x=logFC, y=-log10(FDR))) +
geom_point(aes(color=(FDR < 0.05 & abs(logFC) > 1.5)), alpha=0.6) +
scale_color_manual(values=c("grey", "red")) +
labs(title="Volcano Plot of lncRNA DEGs", x="Log2 Fold Change", y="-Log10 FDR") +
theme_minimal()
# Load necessary library
library(dplyr)
# Read the input file (change 'input.txt' to your actual file name)
df <- read.table("Desktop/DMROUT.txt", header = TRUE, stringsAsFactors = FALSE)
# Apply transformation to each column except the first one
df_transformed <- df %>%
mutate(across(-1, ~ paste0(Chr, "_", .)))
View(df_transformed)
View(df_transformed)
# Read the input file (change 'input.txt' to your actual file name)
df <- read.table("Desktop/DMROUT.txt", header = TRUE, stringsAsFactors = FALSE)
df <- df %>%
mutate(Chr = paste0("Chr", Chr))
View(df_transformed)
View(df)
# Write the modified data to a new file
write.table(df, "Desktop/geneoutput.txt", quote = FALSE, row.names = FALSE, sep = "\t")
# Read the input file (change 'input.txt' to your actual file name)
df <- read.table("Desktop/mus_musculus.txt", header = TRUE, stringsAsFactors = FALSE)
df <- df %>%
mutate(Chr = paste0("Chr", Chr))
View(df)
# Write the modified data to a new file
write.table(df, "Desktop/referenceoutput.txt", quote = FALSE, row.names = FALSE, sep = "\t")
system.file("extdata/proteinGroups.txt",
package = "proDA", mustWork = TRUE)
usethis::create_package("geneFormatter")
install.packages("usethis")
usethis::create_package("geneFormatter")
install.packages("devtools")
usethis::create_package("geneFormatter")
usethis::use_git()
usethis::use_github()
usethis::use_git()
library(geneFormatter)
library(geneFormatter)
library(askpass)
detach("package:askpass", unload = TRUE)
setwd("/Users/surinderpal/Desktop/geneFormatter/")
shiny::runApp()
shiny::runApp()
shiny::runApp()
setwd("/Users/surinderpal/Desktop/geneFormatter/app/")
shiny::runApp()
shiny::runApp()
install.packages("shinyjs")
install.packages("jsonlite")
shiny::runApp()
